%Nomes: Fernanda de Camargo Magano NUSP: 8536044
%		Eduardo Delgado Coloma Bier      8536148

%ProgLin EP2
%Octave começa com índices a partir de 1

function retval = updateB(B, u, m, l)

	for i = 1:m
		if (i != l)
			for j = 1:m
				B(i, j) -= B(l, j) * u(i) / u(l);
			endfor
		endif
	endfor

	for j = 1:m
		B(l, j) = B(l, j) / u(l);
	endfor
	retval = B;
endfunction

function [retval] = findTheta(x, u, basics, len_b)

	min = inf;
		l = 0;
		for i = 1:len_b
			if (u(i) > 0)
				tmp = x(basics(i)) / u(i);
				if (min > tmp)
					min = tmp;
					l = i; 
				endif
			endif
		endfor

		theta_star = min
endfunction

function [ind v] = simplex(A,b,c,m,n,x)
	
	j = 1;
	k = 1;
	basics(1) = 1;
	
	for i = 1:n
		if (x(i) > 0)
			basics(j) = i;
			j += 1;
		else
			nonbasics(k) = i;
			k += 1;
		endif
	endfor
	
	j -= 1;
	k -=1;

	basics
	nonbasics
	len_b = length(basics);
	
	%Criação de B
	for j = 1:len_b
		for i = 1:m
			B(i,j) = A(i,basics(j));
		endfor
	endfor

	%Nesse passo estou invertendo B 
	inverseB = inv(B);
	iteracao = 0;
	found = 0;
	dir = 1;

	while (!found)

	iteracao += 1;
	printf("Iterando: %d\n\n", iteracao);
		%Aqui é feito o cálculo de p' = cb' * B⁻¹
		for j = 1:len_b
			pT(j) = 0;
			for k = 1:len_b
				pT(j) += c(basics(k)) * inverseB(k, j);
			endfor
		endfor

		pT
		%Checo as variáveis j que não estão na base
		%Se todas são não-negativas, a solução viável básica atual é ótima e o algoritmo pára.	
		%Caso contrário escolho um j cujo custo cj < 0

		cont = 0;
		min_cost = inf;
		for j = 1:length(nonbasics)
			aux = 0;
			for i = 1:m
				aux += pT(i)* A(i,j);
			endfor
			cReduced(j) = c(j) - aux;
			if (cReduced(j) >= 0)
				cont +=1;
			elseif(cReduced(j) < min_cost)
				min_cost = cReduced;  %Isso é feito para pegar o custo reduzido o mais negativo possível
				dir = j; 			  %direção j será a direção básica
			endif
		endfor

		cReduced
		if (cont == len_b)
			%algoritmo pára
			printf("Solução ótima foi encontrada!\n");
			printf("\n");
			found = 1;
			%Função objetivo
			objetivo = 0;
			for i = 1:n
				objetivo += c(i) * x(i);
			endfor

			%Falta colocar para imprimir os índicesdas que estavam na base e os valores das comp. do vetor direção
			%Imprime_dados(basics, x, objetivo, nonbasics, cReduced, theta_star, l, dir);
			ind = 0;
			v = x;
		endif	

		%Calcula-se u = -dB = B⁻¹Aj		

		for i = 1:len_b
			u(i) = 0;
			for k = 1:len_b
				u(i) += inverseB(i, k) * A(k,dir);
			endfor
		endfor

		u
		cont = 0;
	    for i = 1:len_b
			if(u(i) <= 0)
				cont +=1;
			endif
		endfor	


		if (cont == len_b) %significa que nenhum índice é positivo		
			theta_star = inf;
			printf("O custo é -infinito\n");
			%found = 1;
			ind = -1;
			v = dir;
		endif

		%Encontrando theta estrela e a posição l
		%Separar esse trecho de código e fazer uma função
		min = inf;
		l = 0;
		for i = 1:len_b
			if (u(i) > 0)
				tmp = x(basics(i)) / u(i);
				if (min > tmp)
					min = tmp;
					ind_l = i;
					l = basics(i); 
				endif
			endif
		endfor

		theta_star = min

		%Assim, fazemos uma troca: a coluna Al é substituída por Aj 
		for i = 1:len_b
			B(i,l) = A(i,dir);
		endfor

		%O vetor x é atualizado
		for i = 1:len_b
			x(basics(i)) = x(basics(i)) - theta_star * u(i); 
		endfor
		x(dir) = theta_star;
		basics(ind_l) = dir;

		len_b

		inverseB = updateB(inverseB, u, len_b, ind_l)

		%Função objetivo
		objetivo = 0;
		for i = 1:n
			objetivo += c(i) * x(i);
		endfor

		%Imprime_dados(basics, x, objetivo, nonbasics, cReduced, theta_star, l, dir);
		x
		i = j = 1;
	endwhile

endfunction


function Imprime_dados(basics, x, objetivo, nonbasics, cReduced, theta_star, l, j)
	
	printf("Índices e varíáveis básicas");
	i, x(i)
	
	printf("custos reduzidos:\n");
	%for i = 1:nonbasics
		i, cReduced(i)
	%endfor

	printf("Entra na base: %d\n", l);

	%printf("Direção:\n");
		%Fazer

	printf("Theta*: %f\n", theta_star);
	printf("Sai da base: %d\n", j);	result octave syntax error
	

	%Imprimir os índices das variáveis que estavam na base e os respectivos valores das componentes do vetor de direção;

	%No caso em que x dado inicialmente é ótimo, tenho que imprimir informações simplificadas (theta estrela não existirá, por exemplo)

endfunction


#######################################################################################################

%Nessa parte pedir para o usuário entrar com x, A, b, c, m, n ou arrumar um jeito de ler de um arquivo
%simplex(A,b,c,m,n,x)

A = input("A = ")
b = input("b = ")
x = input("Solução inicial:\n")
c = input("c = ")
n = input("n = ")
m = input("m = ")

[ind, v] = simplex(A,b,c,m,n,x);