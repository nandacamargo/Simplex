%Nomes: Fernanda de Camargo Magano NUSP: 8536044
%		Eduardo Delgado Coloma Bier      8536148

%ProgLin EP2
%Octave começa com índices a partir de 1

function retval = updateB(B, u, m, l)

	for i = 1:m
		if (i != l)
			for j = 1:m
				B(i, j) -= B(l, j) * u(i) / u(l);
			endfor
		endif
	endfor

	for j = 1:m
		B(l, j) = B(l, j) / u(l);
	endfor
	retval = B;
endfunction

function [theta_star, l, ind_l] = findTheta(x, u, basics, len_b)

	min = inf;
		l = 0;
		for i = 1:len_b
			if (u(i) > 0)
				tmp = x(basics(i)) / u(i);
				if (min > tmp)
					min = tmp;
					ind_l = i;
					l = basics(i); 
				endif
			endif
		endfor

	theta_star = min
endfunction

function [ind v] = simplex(A,b,c,m,n,x)
	
	j = 1;
	k = 1;
	basics(1) = 1;
	
	for i = 1:n
		if (x(i) > 0)
			basics(j) = i;
			j += 1;
		else
			nonbasics(k) = i;
			k += 1;
		endif
	endfor
	
	j -= 1;
	k -= 1;

	len_b = length(basics);
	
	%Criação de B
	for j = 1:len_b
		for i = 1:m
			B(i,j) = A(i,basics(j));
		endfor
	endfor

	%Nesse passo ocorre a inversão de B 
	inverseB = inv(B);
	iteracao = 0;
	found = 0;
	dir = 1;

	while (!found)

	iteracao += 1;
	printf("\n--------------------------\n");
	printf("Iterando: %d\n", iteracao);
	printf("--------------------------\n\n");


		%Aqui é feito o cálculo de p' = cb' * B⁻¹
		for j = 1:len_b
			pT(j) = 0;
			for k = 1:len_b
				pT(j) += c(basics(k)) * inverseB(k, j);
			endfor
		endfor

		%É checado se as variáveis j que não estão na base
		%Se todas são não-negativas, a solução viável básica atual é ótima e o algoritmo pára.	
		%Caso contrário escolhe-se um j cujo custo cj < 0

		cont = 0;
		min_cost = inf;
		for j = 1:length(nonbasics)
			aux = 0;
			for i = 1:m
				aux += pT(i)* A(i,nonbasics(j));
			endfor

			cReduced(j) = c(nonbasics(j)) - aux;
			if (cReduced(j) >= 0)
				cont +=1;
			elseif(cReduced(j) < min_cost)
				min_cost = cReduced;  %Isso é feito para pegar o custo reduzido o mais negativo possível
				dir = nonbasics(j);   %direção j será a direção básica
			endif
		endfor

		if (cont == length(cReduced))
			%algoritmo pára
			found = 1;
			%Função objetivo
			objetivo = 0;
			for i = 1:n
				objetivo += c(i) * x(i);
			endfor

			printf("Solução ótima foi encontrada com custo: %.4f\n", objetivo);
			printf("\n");

			ind = 0
			v = x
			break;
		endif	

		%Calcula-se u = -dB = B⁻¹Aj		

		for i = 1:len_b
			u(i) = 0;
			for k = 1:len_b
				u(i) += inverseB(i, k) * A(k,dir);
			endfor
		endfor

		cont = 0;
	    for i = 1:len_b
			if(u(i) <= 0)
				cont +=1;
			endif
		endfor	


		if (cont == length(u)) %significa que nenhum índice é positivo		
			theta_star = inf
			printf("O valor da função objetivo vai para -infinito\n\n");
			found = 1;
			ind = -1
			v = dir
			break;
		endif

		%Encontrando theta estrela e a posição l
		[theta_star, l, ind_l] = findTheta(x, u, basics, len_b);
		
		directions(iteracao,1) = l; 
		directions(iteracao,2) = -u(ind_l);


		%Assim, fazemos uma troca: a coluna Al é substituída por Aj 
		for i = 1:len_b
			B(i,l) = A(i,dir);
		endfor

		%O vetor x é atualizado
		for i = 1:len_b
			x(basics(i)) = x(basics(i)) - theta_star * u(i); 
		endfor
		x(dir) = theta_star;
		basics(ind_l) = dir;

		inverseB = updateB(inverseB, u, len_b, ind_l);

		%Função objetivo
		objetivo = 0;
		for i = 1:n
			objetivo += c(i) * x(i);
		endfor

		if(!found)
			Imprime_dados(n, basics, x, objetivo, nonbasics, cReduced, directions, theta_star, l, dir, iteracao);
		endif

		x
		i = j = 1;, 
	endwhile

endfunction


function Imprime_dados(n, basics, x, objetivo, nonbasics, cReduced, directions, theta_star, l, dir, iteracao)
	
	printf("Índices e variáveis básicas:\n");
	for i = 1:length(basics)
		printf("%d %.4f\n", basics(i), x(basics(i)));
	endfor

	printf("\nValor da função objetivo: %.4f\n", objetivo);

	printf("\nCustos reduzidos:\n");
	for i = 1:length(nonbasics)
		printf("%d %.4f\n", nonbasics(i), cReduced(i));
	endfor

	printf("\nEntra na base: %d\n", dir);

	printf("\nDireção:\n");
	for i = 1:iteracao
		printf("%d %.4f\n", directions(i,1), directions(i,2));
	endfor

	printf("\nTheta*: %.4f\n", theta_star);
	printf("\nSai da base: %d\n", l);	

endfunction


#######################################################################################################

%simplex(A,b,c,m,n,x)

A = input(" ")
b = input(" ")
x = input("Solução inicial:\n")
c = input("  ")
n = input("  ")
m = input("  ")

[ind, v] = simplex(A,b,c,m,n,x);